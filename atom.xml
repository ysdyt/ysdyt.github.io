<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[ysdyt.net for tech memo]]></title>
  <link href="http://ysdyt.github.io/atom.xml" rel="self"/>
  <link href="http://ysdyt.github.io/"/>
  <updated>2015-06-28T17:52:38+09:00</updated>
  <id>http://ysdyt.github.io/</id>
  <author>
    <name><![CDATA[Yuta Yoshida]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Raspberry Piに固定IPを割り振る]]></title>
    <link href="http://ysdyt.github.io/blog/2015/06/28/raspi-wifi-static-ipaddress/"/>
    <updated>2015-06-28T13:54:08+09:00</updated>
    <id>http://ysdyt.github.io/blog/2015/06/28/raspi-wifi-static-ipaddress</id>
    <content type="html"><![CDATA[<p>以前、wimaxを使ったネット接続の無線化について書きましたが、次はIPアドレスの固定化について。IP固定化とかじゃなくとにかく有線から無線での接続さえできれば良いという人は<a href="http://ysdyt.github.io/blog/2015/03/28/raspi-wifi-setting/">こちら</a></p>

<p>ちなみに今回はwimaxではなく、フレッツ光の回線を使って設定しています（wimaxも有料オプションで固定IPが振れるそうですが詳しくは知らない）。</p>

<!--more-->


<h3>無線LAN機器接続の確認</h3>

<p>何はともあれまずは無線LAN機器が接続されているかを確認。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pi% lsusb                                                                                   <span class="o">[</span>~<span class="o">]</span>
</span><span class='line'>Bus <span class="m">001</span> Device 002: ID 0424:9514 Standard Microsystems Corp.
</span><span class='line'>Bus <span class="m">001</span> Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
</span><span class='line'>Bus <span class="m">001</span> Device 003: ID 0424:ec00 Standard Microsystems Corp.
</span><span class='line'>Bus <span class="m">001</span> Device 004: ID 0411:01a2 BUFFALO INC. <span class="o">(</span>formerly MelCo., Inc.<span class="o">)</span> WLI-UC-GNM Wireless LAN Adapter <span class="o">[</span>Ralink RT8070<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>自分は<a href="(http://www.amazon.co.jp/gp/product/B003NSAMW2/ref=pd_lpo_sbs_dp_ss_1?pf_rd_p=466449256&amp;pf_rd_s=lpo-top-stripe&amp;pf_rd_t=201&amp;pf_rd_i=B00879RO8W&amp;pf_rd_m=AN1VRQENFRJN5&amp;pf_rd_r=1RA98FWJ7XSKXHKYNV1M">BUFFALOの無線LAN子機</a>)を使っていて、それが4つ目にきちんと認識されているのでoｋ</p>

<h3>アクセスポイントのスキャン</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo iwlist wlan0 scan <span class="p">|</span> grep ESSID
</span></code></pre></td></tr></table></div></figure>


<p>実行すると、現在捕まえられるWi-Fiのネットワーク名（SSID）一覧が表示される。接続したいネットワーク名が存在するか確認。</p>

<h4>接続情報の設定書き込み</h4>

<p>上記で確認した接続先ルーターのSSIDとそのパスワードを以下のファイルに書き込む。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>% sudo wpa_passphrase <span class="s2">&quot;接続先のSSID&quot;</span> <span class="s2">&quot;接続先のパスワード&quot;</span> &gt;&gt; /etc/wpa_supplicant/wpa_supplicant.conf
</span></code></pre></td></tr></table></div></figure>


<p>この結果 /etc/wpa_supplicant/wpa_supplicant.confファイルの中身に以下のような情報が入っていればok</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">ctrl_interface</span><span class="o">=</span><span class="nv">DIR</span><span class="o">=</span>/var/run/wpa_supplicant <span class="nv">GROUP</span><span class="o">=</span>netdev
</span><span class='line'><span class="nv">update_config</span><span class="o">=</span>1
</span><span class='line'><span class="nv">network</span><span class="o">={</span>
</span><span class='line'>        <span class="nv">ssid</span><span class="o">=</span><span class="s2">&quot;接続先のSSID&quot;</span>
</span><span class='line'>        <span class="c">#psk=&quot;接続先のパスワード&quot;</span>
</span><span class='line'>        <span class="nv">psk</span><span class="o">=</span>数字とアルファベットの羅列が入ってる
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>中にpskが２つ書かれていて、そのうちの一つがコメントアウトされている。
２つ目のpskは接続先のパスワードがハッシュで鍵化されているもの。どちらでも同じ内容を指すのでどちらか一方だけコメントアウトしてればok。ここでは鍵化したpskを使った。</p>

<h4>/etc/wpa_supplicant/wpa_supplicant.confの編集</h4>

<p>固定化IPを設定するため、上記のファイルを編集して以下の状態に書き換える。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">ctrl_interface</span><span class="o">=</span><span class="nv">DIR</span><span class="o">=</span>/var/run/wpa_supplicant <span class="nv">GROUP</span><span class="o">=</span>netdev
</span><span class='line'><span class="nv">update_config</span><span class="o">=</span>1
</span><span class='line'><span class="nv">network</span><span class="o">={</span>
</span><span class='line'>        <span class="nv">ssid</span><span class="o">=</span><span class="s2">&quot;接続先のSSID&quot;</span>
</span><span class='line'>        <span class="nv">proto</span><span class="o">=</span>WPA2
</span><span class='line'>        <span class="nv">key_mgmt</span><span class="o">=</span>WPA-PSK
</span><span class='line'>        <span class="nv">pairwise</span><span class="o">=</span>TKIP CCMP
</span><span class='line'>        <span class="nv">group</span><span class="o">=</span>TKIP CCMP
</span><span class='line'>        <span class="c">#psk=&quot;接続先のパスワード&quot;</span>
</span><span class='line'>        <span class="nv">psk</span><span class="o">=</span>数字とアルファベットの羅列が入ってる
</span><span class='line'>        <span class="nv">scan_ssid</span><span class="o">=</span>1
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>いろいろ別のブログを見てみると、pairwiseやgroupに&#8221;CCMP&#8221;と設定する方法もあるそうだが、自分の場合は&#8221;TKIP CCMP&#8221;でうまくいった。また、proto=RSNとしているものもあるが、同じくproto=WPA2でうまくいった。</p>

<h4>/etc/network/interfacesの編集</h4>

<p>続いて、/etc/network/interfacesファイルを以下のように編集する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>auto lo
</span><span class='line'>iface lo inet loopback
</span><span class='line'>
</span><span class='line'>iface eth0 inet dhcp
</span><span class='line'>
</span><span class='line'>allow-hotplug wlan0
</span><span class='line'>iface wlan0 inet static <span class="c"># &quot;manual&quot;もしくは&quot;dhcp&quot;となっていれば&quot;static&quot;に変更</span>
</span><span class='line'>address 192.168.1.101 <span class="c">#2~254までの使いたい固定IPアドレスを書く（ここでは101とした）</span>
</span><span class='line'>netmask 255.255.255.0 <span class="c">#接続するネットワークの設定に合わせる。だいたいこれでokのハズ</span>
</span><span class='line'>gateway 192.168.1.1 <span class="c">#接続するネットワークの設定に合わせる。だいたいこれでokのハズ</span>
</span><span class='line'>
</span><span class='line'>wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf <span class="c"># wpa-roamをwpa-confへ変更</span>
</span><span class='line'>iface default inet dhcp
</span><span class='line'>
</span><span class='line'><span class="c">#ここから下の設定は関係ないので放置</span>
</span><span class='line'>auto wlan1
</span><span class='line'>allow-hotplug wlan1
</span><span class='line'>iface wlan1 inet manual
</span><span class='line'>wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf
</span></code></pre></td></tr></table></div></figure>


<p>ここまで設定出来たら、イーサネットインターフェースの再起動を行い、設定を有効化する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>% sudo ifdown wlan0  <span class="c"># WiFiの接続を切る</span>
</span><span class='line'>% sudo ifup wlan0   <span class="c"># WiFiを接続する</span>
</span></code></pre></td></tr></table></div></figure>


<p>このときに、「can&rsquo;t read /etc/network/interfaces」などと出たら、上記ファイルの記述が誤っていないか確認する。</p>

<h4>固定IPで接続できているか確認する</h4>

<p>上記までの手順でネットに接続できていれば、固定IPアドレスが取得できているはずなのでIPアドレスを確認。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ifconfig wlan0
</span></code></pre></td></tr></table></div></figure>


<p>以下のような内容が表示される。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wlan0     Link encap:イーサネット  ハードウェアアドレス xx:xx:xx:xx:xx:xx
</span><span class='line'>          inetアドレス:192.168.0.3 ブロードキャスト:192.168.0.255  マスク:255.255.255.0
</span><span class='line'>          UP BROADCAST RUNNING MULTICAST  MTU:1500  メトリック:1
</span><span class='line'>          RXパケット:3799 エラー:0 損失:0 オーバラン:0 フレーム:0
</span><span class='line'>          TXパケット:687 エラー:0 損失:0 オーバラン:0 キャリア:0
</span><span class='line'>      衝突<span class="o">(</span>Collisions<span class="o">)</span>:0 TXキュー長:1000
</span><span class='line'>          RXバイト:1046888 <span class="o">(</span>1022.3 KiB<span class="o">)</span>  TXバイト:88642 <span class="o">(</span>86.5 KiB<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>このinetアドレスの値（英語環境では inet addrの値）が設定したIPアドレスになっていればok。
ここまで正しく設定できれば、後は再起動してもWiFiで固定IPの設定が維持されるはず。</p>

<h4>グローバルIPアドレス？</h4>

<p>これで（家の中の）同じネットワークに繋がってるPCから<code>ssh pi@192.168.1.101</code> でログイン出来るようになったのだけど、家の外からラズパイにsshは出来ない。
それにはどうやらグローバルIPアドレスなるものを割り振らないといけないらしいのだが、それはまた次回に。</p>

<p>・参考
/etc/network/interfacesファイルの設定にかなりハマってたのですが以下のページが大変参考になりました。多謝！
<a href="http://tkamada.blogspot.jp/2014/07/raspberry-piwifi-dhcpip.html">http://tkamada.blogspot.jp/2014/07/raspberry-piwifi-dhcpip.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Twitter APIを使ってRaspberry PiにCPU温度と現在時刻を呟かせる]]></title>
    <link href="http://ysdyt.github.io/blog/2015/03/29/raspi-cputemp-bot/"/>
    <updated>2015-03-29T03:29:06+09:00</updated>
    <id>http://ysdyt.github.io/blog/2015/03/29/raspi-cputemp-bot</id>
    <content type="html"><![CDATA[<p>こんな感じで一時間（任意の時間）に一回、Rapberry PiのCPU温度をツイートさせる。</p>

<blockquote class="twitter-tweet" lang="ja"><p>2015-03-11_12:00:03現在 CPU温度は 31.5 ℃です。</p>&mdash; ysdyt_raspi (@ysdyt_raspi) <a href="https://twitter.com/ysdyt_raspi/status/575491347655716865">2015, 3月 11</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>これが何の役に立つかだって？自己満足だよ！強いて言うなら、ラズパイの定期生存確認が出来る。</p>

<!--more-->


<h3>必要なパッケージをインストールする</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt-get update
</span><span class='line'><span class="nv">$ </span>sudo apt-get install python-setuptools
</span><span class='line'><span class="nv">$ </span>sudo easy_install pip <span class="c">#pipコマンドのインストール</span>
</span><span class='line'><span class="nv">$ </span>sudo pip install twython <span class="c">#twythonをpipコマンドでインストール</span>
</span></code></pre></td></tr></table></div></figure>


<h3>TwitterのAPI情報を取得</h3>

<p>Twitterのアカウントを作成し、<a href="http://apps.twitter.com/">http://apps.twitter.com/</a> にアクセス。<br/>
「Create New App」をクリックしてアプリケーション名や説明を入力し、登録後の画面で「Access level」を「Read and Write」に変更。</p>

<p>twythonプログラムに与える権限の認証情報は「Keys and Access Tokens」タブにある。<br/>
「Create my access token」をクリックし、「API Key」「API Secret」「Access Token」「Access Token Secret」を取得。
<br></p>

<h3>twythonを使ってツイートするプログラムの作成</h3>

<p>pythonスクリプトを新規作成し、下記を書き込む。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>nano raspi_bot.py
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="c"># coding: utf-8</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">twython</span> <span class="kn">import</span> <span class="n">Twython</span>
</span><span class='line'>
</span><span class='line'><span class="c">#twitterの認証情報を入力</span>
</span><span class='line'><span class="n">CONSUMER_KEY</span> <span class="o">=</span> <span class="s">&#39;取得したAPI Key&#39;</span>
</span><span class='line'><span class="n">CONSUMER_SECRET</span> <span class="o">=</span> <span class="s">&#39;取得したAPI Secret&#39;</span>
</span><span class='line'><span class="n">ACCESS_KEY</span> <span class="o">=</span> <span class="s">&#39;取得したAccess Token&#39;</span>
</span><span class='line'><span class="n">ACCESS_SECRET</span> <span class="o">=</span> <span class="s">&#39;取得したAccess Token Secret&#39;</span>
</span><span class='line'><span class="n">api</span> <span class="o">=</span> <span class="n">Twython</span><span class="p">(</span><span class="n">CONSUMER_KEY</span><span class="p">,</span><span class="n">CONSUMER_SECRET</span><span class="p">,</span><span class="n">ACCESS_KEY</span><span class="p">,</span><span class="n">ACCESS_SECRET</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">#CPU温度を取得</span>
</span><span class='line'><span class="n">cmd</span> <span class="o">=</span> <span class="s">&#39;/opt/vc/bin/vcgencmd measure_temp&#39;</span>
</span><span class='line'><span class="n">line</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">popen</span><span class="p">(</span><span class="n">cmd</span><span class="p">)</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class='line'><span class="n">temp</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;=&#39;</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;&#39;&quot;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c">#取得したCPU温度をツイート</span>
</span><span class='line'><span class="n">api</span><span class="o">.</span><span class="n">update_status</span><span class="p">(</span><span class="n">status</span><span class="o">=</span> <span class="s">&#39;CPU温度は &#39;</span><span class="o">+</span><span class="n">temp</span><span class="o">+</span><span class="s">&#39; ℃です。&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>作成したファイルに実行権限を与える。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>chmod +x raspi_bot.py
</span></code></pre></td></tr></table></div></figure>


<p>その後、一度実行してみてtwitterに投稿されるかを確認してみる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>python raspi_bot.py
</span></code></pre></td></tr></table></div></figure>


<p>twitterのタイムライン上で温度の投稿が確認できれば、次はこれを定期実行するようにする。
<br></p>

<h3>raspi_bot.pyを定期実行させる</h3>

<p>&ldquo;cron&#8221;にてraspi_bot.pyを自動的に定期実行させる。cronについては<a href="http://www.server-memo.net/tips/crontab.html">こちら</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>crontab -e
</span></code></pre></td></tr></table></div></figure>


<p>これで新たに開くウィンドウの下部に、次の一文を書き込み保存。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="m">00</span> * * * *  python /home/pi/raspi_bot.py
</span></code></pre></td></tr></table></div></figure>


<p>この一文の意味は<a href="http://www.server-memo.net/tips/crontab.html">こちら</a>を参照して欲しいが、</p>

<p>・<code>00 * * * *</code> -> 一時間に一回、指示したジョブを自動実行<br/>
・<code>python /home/pi/raspi_bot.py</code> -> 自動実行させるジョブ</p>

<p>を表している。定期実行させる間隔は任意に指定できる。</p>

<p>ひとまずこれで完了。時間を置いて様子を見てみると、指定した時間間隔で自動的にツイートされているハズ。
<br></p>

<h3>しかしここで問題が、、、</h3>

<p>1時間に一回タイムラインに流れるはずのツイートだが、投稿されていない時間があることを発見&hellip;<br/>
原因を調べるべく、手動でraspi_bot.pyを何度が実行していたところ、下記のようなエラーがたまに出ることがわかった。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Twitter API returned a <span class="m">403</span> <span class="o">(</span>Forbidden<span class="o">)</span>, Status is a duplicate.
</span></code></pre></td></tr></table></div></figure>


<p>エラー曰く、重複した投稿（過去に全く同じ内容のツイートをした場合）はツイート出来ないようになっているらしい。知らなかった&hellip;どうやら同じCPU温度を取得しているツイートが弾かれていた模様。
<br></p>

<h3>現在時間を取得する（タイムスタンプを取得）</h3>

<p>これを回避するべく、タイムスタンプ（現在時刻）を入れることにする。これでツイート内容の重複を回避できる。<br/>
例: 「2015-03-11_12:00:03」という部分の情報</p>

<blockquote class="twitter-tweet" lang="ja"><p>2015-03-11_12:00:03現在、CPU温度は 31.5 ℃です。</p>&mdash; ysdyt_raspi (@ysdyt_raspi) <a href="https://twitter.com/ysdyt_raspi/status/575491347655716865">2015, 3月 11</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p><br>
<a href="https://github.com/raspberrypilearning/temperature-log/blob/master/worksheet.md">こちら</a>を参考にしながら上記の<code>raspi_bot.py</code>にタイムスタンプを取得するコードを追加する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="c"># coding: utf-8</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">twython</span> <span class="kn">import</span> <span class="n">Twython</span>
</span><span class='line'>
</span><span class='line'><span class="c">#twitterの認証情報を入力</span>
</span><span class='line'><span class="n">CONSUMER_KEY</span> <span class="o">=</span> <span class="s">&#39;取得したAPI Key&#39;</span>
</span><span class='line'><span class="n">CONSUMER_SECRET</span> <span class="o">=</span> <span class="s">&#39;取得したAPI Secret&#39;</span>
</span><span class='line'><span class="n">ACCESS_KEY</span> <span class="o">=</span> <span class="s">&#39;取得したAccess Token&#39;</span>
</span><span class='line'><span class="n">ACCESS_SECRET</span> <span class="o">=</span> <span class="s">&#39;取得したAccess Token Secret&#39;</span>
</span><span class='line'><span class="n">api</span> <span class="o">=</span> <span class="n">Twython</span><span class="p">(</span><span class="n">CONSUMER_KEY</span><span class="p">,</span><span class="n">CONSUMER_SECRET</span><span class="p">,</span><span class="n">ACCESS_KEY</span><span class="p">,</span><span class="n">ACCESS_SECRET</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">#CPU温度を取得</span>
</span><span class='line'><span class="n">cmd</span> <span class="o">=</span> <span class="s">&#39;/opt/vc/bin/vcgencmd measure_temp&#39;</span>
</span><span class='line'><span class="n">line</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">popen</span><span class="p">(</span><span class="n">cmd</span><span class="p">)</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class='line'><span class="n">temp</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;=&#39;</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;&#39;&quot;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c">#現在時間を取得</span>
</span><span class='line'><span class="n">timestamp</span> <span class="o">=</span> <span class="s">&#39;date +</span><span class="si">%F</span><span class="s">_%H:%M:%S&#39;</span>
</span><span class='line'><span class="n">current_time</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">popen</span><span class="p">(</span><span class="n">timestamp</span><span class="p">)</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c">#取得したCPU温度をツイート</span>
</span><span class='line'><span class="n">api</span><span class="o">.</span><span class="n">update_status</span><span class="p">(</span><span class="n">status</span><span class="o">=</span> <span class="n">current_time</span><span class="o">+</span><span class="s">&#39;現在、CPU温度は &#39;</span><span class="o">+</span><span class="n">temp</span><span class="o">+</span><span class="s">&#39; ℃です。&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで、タイムスタンプが追加されツイートの内容重複が回避される。</p>

<h3>自動スリープを解除する</h3>

<p>またまた動作を観察していると、どこかの段階から全くツイートされなくなっていた&hellip;
<del>調べてみるとラズパイはデフォルトでは自動でスリープする設定になっているらしい。
<a href="http://akiomik.hatenablog.jp/entry/2013/09/12/211523">こちら</a>を参考にして自動スリープを解除した。これでようやく完成。</p>

<p>[訂正] 上記の自動スリープの話はただ単にモニター出力が自動でスリープするという話だった。
ラズパイを起動し続けると（具体的には2日半くらい）自動でシャットダウン?する減少はまだ解決できていない&hellip;熱暴走が原因か？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raspberry PiをWiMAXを使ってネット接続する]]></title>
    <link href="http://ysdyt.github.io/blog/2015/03/28/raspi-wifi-setting/"/>
    <updated>2015-03-28T01:15:29+09:00</updated>
    <id>http://ysdyt.github.io/blog/2015/03/28/raspi-wifi-setting</id>
    <content type="html"><![CDATA[<p>自宅では固定回線のネット契約をしていないので、WiMAXの無線ルーターを使っていつもネットに繋いでいる。<br/>
ラズパイのネット接続解説はほとんどが有線ケーブルでの接続を前提にしているため、Wi-Fiでの接続方法を個人的な備忘録としてメモ。</p>

<p>以下、Wi-Fiの設定は<a href="http://qiita.com/R-STYLE/items/8d37fb59e4872faee2bc">こちら</a>をほぼそのままコピペした。+αで個人的な補足を追加。</p>

<!--more-->


<p><br></p>

<h3>使用したWi-Fiドングル</h3>

<p>Rapberry Piの無線化には以下のドングルを使用。700円ほど。</p>

<p>・<a href="http://www.amazon.co.jp/gp/product/B003NSAMW2/ref=pd_lpo_sbs_dp_ss_1?pf_rd_p=466449256&amp;pf_rd_s=lpo-top-stripe&amp;pf_rd_t=201&amp;pf_rd_i=B00879RO8W&amp;pf_rd_m=AN1VRQENFRJN5&amp;pf_rd_r=1RA98FWJ7XSKXHKYNV1M">BUFFALO 無線LAN子機 コンパクトモデル 11n技術・11g/b対応 WLI-UC-GNM</a></p>

<p><br></p>

<h3>/etc/network/interfacesの編集</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo nano /etc/network/interfaces
</span></code></pre></td></tr></table></div></figure>


<p>開いたファイルの中の下記2行を編集</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>iface wlan0 inet manual
</span><span class='line'>wpa-roam /etc/wpa_supplicant/wpa_supplicant.conf
</span></code></pre></td></tr></table></div></figure>


<p>↓</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>iface wlan0 inet dhcp
</span><span class='line'>wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf
</span></code></pre></td></tr></table></div></figure>


<h3>アクセスポイントのスキャン</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo iwlist wlan0 scan <span class="p">|</span> grep ESSID
</span></code></pre></td></tr></table></div></figure>


<p>実行すると、現在捕まえられるWi-Fiのネットワーク名（SSID）一覧が表示される。接続したいネットワーク名が存在するか確認。</p>

<h3>アクセスポイントに接続テスト</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo iwconfig wlan0 essid 接続先のSSID key s:接続先のパスワード
</span></code></pre></td></tr></table></div></figure>


<h3>接続の確認</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>iwconfig wlan0 <span class="p">|</span> grep ESSID
</span></code></pre></td></tr></table></div></figure>


<p>実行の結果、パスワードが合っていて、接続が可能であれば以下の様な表示が出る</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wlan0     IEEE 802.11bgn  ESSID:<span class="s2">&quot;接続先のSSID&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>接続情報の設定書き込み</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo su -   <span class="c">#rootになる</span>
</span><span class='line'><span class="nv">$ </span>wpa_passphrase <span class="s2">&quot;接続先のSSID&quot;</span> <span class="s2">&quot;接続先のパスワード&quot;</span> &gt;&gt; /etc/wpa_supplicant/wpa_supplicant.conf  <span class="c">#ファイルへ情報の書き込み</span>
</span></code></pre></td></tr></table></div></figure>


<p>この結果 /etc/wpa_supplicant/wpa_supplicant.confファイルの中身に以下の情報が入っていればok</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">ctrl_interface</span><span class="o">=</span><span class="nv">DIR</span><span class="o">=</span>/var/run/wpa_supplicant <span class="nv">GROUP</span><span class="o">=</span>netdev
</span><span class='line'><span class="nv">update_config</span><span class="o">=</span>1
</span><span class='line'><span class="nv">network</span><span class="o">={</span>
</span><span class='line'>        <span class="nv">ssid</span><span class="o">=</span><span class="s2">&quot;接続先のSSID&quot;</span>
</span><span class='line'>        <span class="c">#psk=&quot;接続先のパスワード&quot;  #紛らわしいのだけどpskの先頭の&quot;#&quot;も必要</span>
</span><span class='line'>        <span class="nv">psk</span><span class="o">=</span>数字とアルファベットの羅列が入ってる
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>最後に pskの行の後に <code>scan_ssid=1</code>を追加。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">ctrl_interface</span><span class="o">=</span><span class="nv">DIR</span><span class="o">=</span>/var/run/wpa_supplicant <span class="nv">GROUP</span><span class="o">=</span>netdev
</span><span class='line'><span class="nv">update_config</span><span class="o">=</span>1
</span><span class='line'><span class="nv">network</span><span class="o">={</span>
</span><span class='line'>        <span class="nv">ssid</span><span class="o">=</span><span class="s2">&quot;接続先のSSID&quot;</span>
</span><span class='line'>        <span class="c">#psk=&quot;接続先のパスワード&quot;</span>
</span><span class='line'>        <span class="nv">psk</span><span class="o">=</span>数字とアルファベットの羅列が入ってる
</span><span class='line'>        <span class="nv">scan_ssid</span><span class="o">=</span>1
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>別の機会に他のネットワークへの接続を追加で書き込むと、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">network</span><span class="o">={</span>
</span><span class='line'>        <span class="nv">ssid</span><span class="o">=</span><span class="s2">&quot;接続先のSSID&quot;</span>
</span><span class='line'>      hogehogehoge...
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="nv">network</span><span class="o">={</span>
</span><span class='line'>        <span class="nv">ssid</span><span class="o">=</span><span class="s2">&quot;接続先のSSID2&quot;</span>
</span><span class='line'>      hogehogehoge...
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="nv">network</span><span class="o">={</span>
</span><span class='line'>        <span class="nv">ssid</span><span class="o">=</span><span class="s2">&quot;接続先のSSID3&quot;</span>
</span><span class='line'>      hogehogehoge...
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>という感じで、おしりに設定情報がどんどん追加されていく。</p>

<h3>再起動</h3>

<p>ここまで設定が完了したら後は再起動で設定を反映させるだけ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo reboot
</span></code></pre></td></tr></table></div></figure>


<p>再起動後、自動でWi-Fiに接続されているはず。ブラウザなどでネット接続できるか確認してみる。</p>

<h2><br></h2>

<h3>SSHでRaspberry Piにリモートログイン</h3>

<p>以後は別件なので必要な人だけ。<br/>
上記までの手順でネットに接続できていれば、IPアドレスが取得できているはずなのでIPアドレスを確認。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ifconfig wlan0
</span></code></pre></td></tr></table></div></figure>


<p>以下のような内容が表示される。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wlan0     Link encap:イーサネット  ハードウェアアドレス xx:xx:xx:xx:xx:xx
</span><span class='line'>          inetアドレス:192.168.0.3 ブロードキャスト:192.168.0.255  マスク:255.255.255.0
</span><span class='line'>          UP BROADCAST RUNNING MULTICAST  MTU:1500  メトリック:1
</span><span class='line'>          RXパケット:3799 エラー:0 損失:0 オーバラン:0 フレーム:0
</span><span class='line'>          TXパケット:687 エラー:0 損失:0 オーバラン:0 キャリア:0
</span><span class='line'>      衝突<span class="o">(</span>Collisions<span class="o">)</span>:0 TXキュー長:1000
</span><span class='line'>          RXバイト:1046888 <span class="o">(</span>1022.3 KiB<span class="o">)</span>  TXバイト:88642 <span class="o">(</span>86.5 KiB<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>このinetアドレスの値（英語環境では inet addrの値）を使って、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ssh pi@192.168.0.3
</span></code></pre></td></tr></table></div></figure>


<p>とsshし、ログインパスワードを入れればリモートログイン出来て、自前のMacやWinからアクセスしてラズパイの操作が可能になる。（今回はdhcpの設定であり、固定アドレスではないの、ラズパイの電源を落としたりするとsshできなくなる）</p>

<p>固定アドレスの設定方法はまた別エントリーにて。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raspberry PiのCLI/GUIログインの切り替え]]></title>
    <link href="http://ysdyt.github.io/blog/2015/03/27/raspi-cli-gui-login/"/>
    <updated>2015-03-27T22:42:58+09:00</updated>
    <id>http://ysdyt.github.io/blog/2015/03/27/raspi-cli-gui-login</id>
    <content type="html"><![CDATA[<h3>CLIからGUIへの一時的な切り替え</h3>

<p>Rapberry Piを初めに起動した時はCLIから始まる。GUIへは切り替えは下記のコマンドを実行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>startx
</span></code></pre></td></tr></table></div></figure>


<p>少し待てば自動的にGUIのデスクトップが表示される。</p>

<!--more-->


<p><br></p>

<h3>起動時から自動でGUIが立ち上がるようにする</h3>

<p>raspi-configを起動</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo raspi-config
</span></code></pre></td></tr></table></div></figure>


<p>メニューから<br/>
「3 Enable Boot to Desktop/Scratch」を選び、<br/>
「Desktop Log in as user &lsquo;pi&rsquo; at the graphical desktop」で「了解」を選択<br/>
再起動を求められたら従う</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo reboot
</span></code></pre></td></tr></table></div></figure>


<p>すると最初からGUIデスクトップ画面で起動するようになる。</p>

<p><br></p>

<h3>初期起動をCLIに戻す</h3>

<p>GUI起動にした後、再びCLI起動に戻したければ、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo raspi-config
</span></code></pre></td></tr></table></div></figure>


<p>メニューから<br/>
「3 Enable Boot to Desktop/Scratch」を選び、<br/>
「Console Text console, requiring login (default)」で「了解」を選択<br/>
その後、再起動をかけるとCLIから始まるようになっている</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress設定でつまずいたところメモ]]></title>
    <link href="http://ysdyt.github.io/blog/2015/03/25/octopress-memo/"/>
    <updated>2015-03-25T18:38:30+09:00</updated>
    <id>http://ysdyt.github.io/blog/2015/03/25/octopress-memo</id>
    <content type="html"><![CDATA[<p>Octopressの初回設置について、基本的には<a href="http://blog.shiroyama.us/blog/2014/02/26/octopress/">こちら</a>の内容を参考にさせてもらったのだが、新しいエントリーを書いた後に</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>rake deploy
</span></code></pre></td></tr></table></div></figure>


<p>しても新しい投稿が反映されず困っていた。deployしてもnew postが反映されない問題。ついでに _config.ymlに新たに書き込んだ内容も反映されない&hellip;</p>

<!-- more -->


<p>解決策は</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rake generate <span class="c"># convert to html</span>
</span><span class='line'><span class="nv">$ </span>rake deploy   <span class="c"># publish (push to GitHub)</span>
</span></code></pre></td></tr></table></div></figure>


<p>つまり、rake deploy する前に、rake generateをする必要があるらしい。<br/>
そしてこれらは</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rake gen_deploy
</span></code></pre></td></tr></table></div></figure>


<p>という一つのコマンドでまとめて行うこともできる。<br/>
ただしこの場合は、rake generateで失敗した場合にもその状態でdeployされて、なんだか面倒なことになるらしいので自分は generateとdeployを分けて行っている。</p>

<p>あと、_config.ymlが反映されない問題は、自分の場合は rake gen_deployを_config.ymlが置いてある階層で行うと上手く反映された（そして反映に少し時間がかかる場合があるのでちょっと待ってみる必要もあるかもしれない）<br/>
とりあえず情報を更新する場合は、Octopressホームディレクトリ直下で gen_deploy すると間違いないのではないかと。</p>

<p>なんだかよくわからないけど、とりあえずこれで上手くいってます。</p>

<p>P.S<br/>
deployではなく、rake previewしたときに上手くローカルに最新の内容が反映されない場合は、一度 rake previewを落として、再度 rake preview を実行すると上手く反映される。特に、サイドバーの情報変更や、_config.ymlの内容を変更してローカルで確認したい場合は、一度落として再度立ち上げないとうまく反映されないっぽい。</p>

<p>&lt;参考><br/>
・GitHub pages + Octopressの導入<br/>
<a href="http://rcmdnk.github.io/blog/2013/03/07/setup-octopress/">http://rcmdnk.github.io/blog/2013/03/07/setup-octopress/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[テック用備忘録ブログ始めます]]></title>
    <link href="http://ysdyt.github.io/blog/2015/03/20/start-new-blog/"/>
    <updated>2015-03-20T00:45:49+09:00</updated>
    <id>http://ysdyt.github.io/blog/2015/03/20/start-new-blog</id>
    <content type="html"><![CDATA[<p>本家ブログ <a href="http://ysdyt.net">ysdyt.net</a>において、
地方ネタ、生命科学、技術ネタ等々、話題がごっちゃになってきたので、技術ネタのみを切り離して書き残しておくブログを作った。こっちのほうが見やすそうだし、Github Pagesも作ってみたかったので。</p>

<!-- more -->


<p>こちらのブログには主に、趣味でいろいろ触っているRasberry Piのことや、これから仕事で携わるであろうデータ解析分野のことなどを書いていきたいと思う。</p>

<p>ということで投稿テスト兼ねて。</p>

<p>参考</p>

<p>・エンジニアのブログは Octopress が最適<br/>
<a href="http://blog.shiroyama.us/blog/2014/02/26/octopress/">http://blog.shiroyama.us/blog/2014/02/26/octopress/</a></p>

<p>・GithubとOctopressでモダンな技術系ブログを作ってみる<br/>
<a href="http://blog.glidenote.com/blog/2011/11/07/install-octopress-on-github/">http://blog.glidenote.com/blog/2011/11/07/install-octopress-on-github/</a></p>

<p>・5分でできる簡単 Octopress セッティング<br/>
<a href="http://morizyun.github.io/blog/octopress-hatena-disqus-new-tab/">http://morizyun.github.io/blog/octopress-hatena-disqus-new-tab/</a></p>

<p>・Octopressにカテゴリーリストとタグクラウドの設定<br/>
<a href="http://scrtree.github.io/blog/2013/10/30/octopress-tagcloud/">http://scrtree.github.io/blog/2013/10/30/octopress-tagcloud/</a></p>

<p>・OctopressのサイドバーにTwitterのタイムラインを埋め込む<br/>
<a href="http://msaisai.github.io/blog/2013/06/19/octopress-twitter/">http://msaisai.github.io/blog/2013/06/19/octopress-twitter/</a></p>

<p>・Octopressにはてなブックマークのボタンを設置  <br/>
<a href="http://qiita.com/fakestarbaby/items/329cb613350e25b1714b">http://qiita.com/fakestarbaby/items/329cb613350e25b1714b</a></p>

<p>・Octopress に Pocket ボタンを追加する<br/>
<a href="http://qiita.com/toshibohjp/items/2cce249428349013cdcc">http://qiita.com/toshibohjp/items/2cce249428349013cdcc</a></p>

<p>・Octopressにはてなスターを設置<br/>
<a href="http://blog.monoweb.info/blog/2012/10/18/octopress-hatena-star/">http://blog.monoweb.info/blog/2012/10/18/octopress-hatena-star/</a></p>

<p>・新規ページを作成し、ナビゲーションバーに追加<br/>
<a href="http://rcmdnk.github.io/blog/2013/03/10/pages/">http://rcmdnk.github.io/blog/2013/03/10/pages/</a></p>
]]></content>
  </entry>
  
</feed>
