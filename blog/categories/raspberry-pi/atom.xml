<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Raspberry Pi | ysdyt.net for tech memo]]></title>
  <link href="http://ysdyt.github.io/blog/categories/raspberry-pi/atom.xml" rel="self"/>
  <link href="http://ysdyt.github.io/"/>
  <updated>2015-06-28T16:56:32+09:00</updated>
  <id>http://ysdyt.github.io/</id>
  <author>
    <name><![CDATA[Yuta Yoshida]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Raspberry Piに固定IPを割り振る]]></title>
    <link href="http://ysdyt.github.io/blog/2015/06/28/raspi-wifi-static-ipaddress/"/>
    <updated>2015-06-28T13:54:08+09:00</updated>
    <id>http://ysdyt.github.io/blog/2015/06/28/raspi-wifi-static-ipaddress</id>
    <content type="html"><![CDATA[<p>以前、wimaxを使ったネット接続の無線化について書きましたが、次はIPアドレスの固定化について。IP固定化とかじゃなくとにかく有線から無線での接続さえできれば良いという人は<a href="http://ysdyt.github.io/blog/2015/03/28/raspi-wifi-setting/">こちら</a></p>

<p>ちなみに今回はwimaxではなく、フレッツ光の回線を使って設定しています（wimaxも有料オプションで固定IPが振れるそうですが詳しくは知らない）。</p>

<h3>無線LAN機器接続の確認</h3>

<p>何はともあれまずは無線LAN機器が接続されているかを確認。</p>

<pre><code class="bash">pi% lsusb                                                                                   [~]
Bus 001 Device 002: ID 0424:9514 Standard Microsystems Corp.
Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
Bus 001 Device 003: ID 0424:ec00 Standard Microsystems Corp.
Bus 001 Device 004: ID 0411:01a2 BUFFALO INC. (formerly MelCo., Inc.) WLI-UC-GNM Wireless LAN Adapter [Ralink RT8070]
</code></pre>

<p>自分は<a href="(http://www.amazon.co.jp/gp/product/B003NSAMW2/ref=pd_lpo_sbs_dp_ss_1?pf_rd_p=466449256&amp;pf_rd_s=lpo-top-stripe&amp;pf_rd_t=201&amp;pf_rd_i=B00879RO8W&amp;pf_rd_m=AN1VRQENFRJN5&amp;pf_rd_r=1RA98FWJ7XSKXHKYNV1M">BUFFALOの無線LAN子機</a>)を使っていて、それが4つ目にきちんと認識されているのでoｋ</p>

<h3>アクセスポイントのスキャン</h3>

<pre><code class="bash">$ sudo iwlist wlan0 scan | grep ESSID
</code></pre>

<p>実行すると、現在捕まえられるWi-Fiのネットワーク名（SSID）一覧が表示される。接続したいネットワーク名が存在するか確認。</p>

<h4>接続情報の設定書き込み</h4>

<p>上記で確認した接続先ルーターのSSIDとそのパスワードを以下のファイルに書き込む。</p>

<pre><code class="bash">% sudo wpa_passphrase "接続先のSSID" "接続先のパスワード" &gt;&gt; /etc/wpa_supplicant/wpa_supplicant.conf
</code></pre>

<p>この結果 /etc/wpa_supplicant/wpa_supplicant.confファイルの中身に以下のような情報が入っていればok</p>

<pre><code class="bash">ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1
network={
        ssid="接続先のSSID"
        #psk="接続先のパスワード"
        psk=数字とアルファベットの羅列が入ってる
}
</code></pre>

<p>中にpskが２つ書かれていて、そのうちの一つがコメントアウトされている。
２つ目のpskは接続先のパスワードがハッシュで鍵化されているもの。どちらでも同じ内容を指すのでどちらか一方だけコメントアウトしてればok。ここでは鍵化したpskを使った。</p>

<h4>/etc/wpa_supplicant/wpa_supplicant.confの編集</h4>

<p>固定化IPを設定するため、上記のファイルを編集して以下の状態に書き換える。</p>

<pre><code>ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1
network={
        ssid="接続先のSSID"
        proto=WPA2
        key_mgmt=WPA-PSK
        pairwise=TKIP CCMP
        group=TKIP CCMP
        #psk="接続先のパスワード"
        psk=数字とアルファベットの羅列が入ってる
        scan_ssid=1
}
</code></pre>

<p>いろいろ別のブログを見てみると、pairwiseやgroupに&#8221;CCMP&#8221;と設定する方法もあるそうだが、自分の場合は&#8221;TKIP CCMP&#8221;でうまくいった。また、proto=RSNとしているものもあるが、同じくproto=WPA2でうまくいった。</p>

<h4>/etc/network/interfacesの編集</h4>

<p>続いて、/etc/network/interfacesファイルを以下のように編集する。</p>

<pre><code>auto lo
iface lo inet loopback

iface eth0 inet dhcp

allow-hotplug wlan0
iface wlan0 inet static # "manual"もしくは"dhcp"となっていれば"static"に変更
address 192.168.1.101 #2~254までの使いたい固定IPアドレスを書く（ここでは101とした）
netmask 255.255.255.0 #接続するネットワークの設定に合わせる。だいたいこれでokのハズ
gateway 192.168.1.1 #接続するネットワークの設定に合わせる。だいたいこれでokのハズ

wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf # wpa-roamをwpa-confへ変更
iface default inet dhcp

#ここから下の設定は関係ないので放置
auto wlan1
allow-hotplug wlan1
iface wlan1 inet manual
wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf
</code></pre>

<p>ここまで設定出来たら、イーサネットインターフェースの再起動を行い、設定を有効化する。</p>

<pre><code class="bash">% sudo ifdown wlan0  # WiFiの接続を切る
% sudo ifup wlan0   # WiFiを接続する
</code></pre>

<p>このときに、「can&rsquo;t read /etc/network/interfaces」などと出たら、上記ファイルの記述が誤っていないか確認する。</p>

<h4>固定IPで接続できているか確認する</h4>

<p>上記までの手順でネットに接続できていれば、固定IPアドレスが取得できているはずなのでIPアドレスを確認。</p>

<pre><code class="bash">$ ifconfig wlan0
</code></pre>

<p>以下のような内容が表示される。</p>

<pre><code class="bash">wlan0     Link encap:イーサネット  ハードウェアアドレス xx:xx:xx:xx:xx:xx
          inetアドレス:192.168.0.3 ブロードキャスト:192.168.0.255  マスク:255.255.255.0
          UP BROADCAST RUNNING MULTICAST  MTU:1500  メトリック:1
          RXパケット:3799 エラー:0 損失:0 オーバラン:0 フレーム:0
          TXパケット:687 エラー:0 損失:0 オーバラン:0 キャリア:0
      衝突(Collisions):0 TXキュー長:1000
          RXバイト:1046888 (1022.3 KiB)  TXバイト:88642 (86.5 KiB)
</code></pre>

<p>このinetアドレスの値（英語環境では inet addrの値）が設定したIPアドレスになっていればok。
ここまで正しく設定できれば、後は再起動してもWiFiで固定IPの設定が維持されるはず。</p>

<h4>グローバルIPアドレス？</h4>

<p>これで（家の中の）同じネットワークに繋がってるPCから<code>ssh pi@192.168.1.101</code> でログイン出来るようになったのだけど、家の外からラズパイにsshは出来ない。
それにはどうやらグローバルIPアドレスなるものを割り振らないといけないらしいのだが、それはまた次回に。</p>

<p>・参考
/etc/network/interfacesファイルの設定にかなりハマってたのですが以下のページが大変参考になりました。多謝！
<a href="http://tkamada.blogspot.jp/2014/07/raspberry-piwifi-dhcpip.html">http://tkamada.blogspot.jp/2014/07/raspberry-piwifi-dhcpip.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Twitter APIを使ってRaspberry PiにCPU温度と現在時刻を呟かせる]]></title>
    <link href="http://ysdyt.github.io/blog/2015/03/29/raspi-cputemp-bot/"/>
    <updated>2015-03-29T03:29:06+09:00</updated>
    <id>http://ysdyt.github.io/blog/2015/03/29/raspi-cputemp-bot</id>
    <content type="html"><![CDATA[<p>こんな感じで一時間（任意の時間）に一回、Rapberry PiのCPU温度をツイートさせる。</p>

<blockquote class="twitter-tweet" lang="ja"><p>2015-03-11_12:00:03現在 CPU温度は 31.5 ℃です。</p>&mdash; ysdyt_raspi (@ysdyt_raspi) <a href="https://twitter.com/ysdyt_raspi/status/575491347655716865">2015, 3月 11</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>これが何の役に立つかだって？自己満足だよ！強いて言うなら、ラズパイの定期生存確認が出来る。</p>

<!--more-->


<h3>必要なパッケージをインストールする</h3>

<pre><code class="bash">$ sudo apt-get update
$ sudo apt-get install python-setuptools
$ sudo easy_install pip #pipコマンドのインストール
$ sudo pip install twython #twythonをpipコマンドでインストール
</code></pre>

<h3>TwitterのAPI情報を取得</h3>

<p>Twitterのアカウントを作成し、<a href="http://apps.twitter.com/">http://apps.twitter.com/</a> にアクセス。<br/>
「Create New App」をクリックしてアプリケーション名や説明を入力し、登録後の画面で「Access level」を「Read and Write」に変更。</p>

<p>twythonプログラムに与える権限の認証情報は「Keys and Access Tokens」タブにある。<br/>
「Create my access token」をクリックし、「API Key」「API Secret」「Access Token」「Access Token Secret」を取得。
<br></p>

<h3>twythonを使ってツイートするプログラムの作成</h3>

<p>pythonスクリプトを新規作成し、下記を書き込む。</p>

<pre><code class="bash">$ nano raspi_bot.py
</code></pre>

<pre><code class="python">#!/usr/bin/env python
# coding: utf-8

import os
from twython import Twython

#twitterの認証情報を入力
CONSUMER_KEY = '取得したAPI Key'
CONSUMER_SECRET = '取得したAPI Secret'
ACCESS_KEY = '取得したAccess Token'
ACCESS_SECRET = '取得したAccess Token Secret'
api = Twython(CONSUMER_KEY,CONSUMER_SECRET,ACCESS_KEY,ACCESS_SECRET)

#CPU温度を取得
cmd = '/opt/vc/bin/vcgencmd measure_temp'
line = os.popen(cmd).readline().strip() 
temp = line.split('=')[1].split("'")[0]

#取得したCPU温度をツイート
api.update_status(status= 'CPU温度は '+temp+' ℃です。')
</code></pre>

<p>作成したファイルに実行権限を与える。</p>

<pre><code class="bash">$ chmod +x raspi_bot.py
</code></pre>

<p>その後、一度実行してみてtwitterに投稿されるかを確認してみる。</p>

<pre><code class="bash">$ python raspi_bot.py
</code></pre>

<p>twitterのタイムライン上で温度の投稿が確認できれば、次はこれを定期実行するようにする。
<br></p>

<h3>raspi_bot.pyを定期実行させる</h3>

<p>&ldquo;cron&#8221;にてraspi_bot.pyを自動的に定期実行させる。cronについては<a href="http://www.server-memo.net/tips/crontab.html">こちら</a></p>

<pre><code class="bash">$ crontab -e
</code></pre>

<p>これで新たに開くウィンドウの下部に、次の一文を書き込み保存。</p>

<pre><code>00 * * * *  python /home/pi/raspi_bot.py
</code></pre>

<p>この一文の意味は<a href="http://www.server-memo.net/tips/crontab.html">こちら</a>を参照して欲しいが、</p>

<p>・<code>00 * * * *</code> -> 一時間に一回、指示したジョブを自動実行<br/>
・<code>python /home/pi/raspi_bot.py</code> -> 自動実行させるジョブ</p>

<p>を表している。定期実行させる間隔は任意に指定できる。</p>

<p>ひとまずこれで完了。時間を置いて様子を見てみると、指定した時間間隔で自動的にツイートされているハズ。
<br></p>

<h3>しかしここで問題が、、、</h3>

<p>1時間に一回タイムラインに流れるはずのツイートだが、投稿されていない時間があることを発見&hellip;<br/>
原因を調べるべく、手動でraspi_bot.pyを何度が実行していたところ、下記のようなエラーがたまに出ることがわかった。</p>

<pre><code class="bash">Twitter API returned a 403 (Forbidden), Status is a duplicate.
</code></pre>

<p>エラー曰く、重複した投稿（過去に全く同じ内容のツイートをした場合）はツイート出来ないようになっているらしい。知らなかった&hellip;どうやら同じCPU温度を取得しているツイートが弾かれていた模様。
<br></p>

<h3>現在時間を取得する（タイムスタンプを取得）</h3>

<p>これを回避するべく、タイムスタンプ（現在時刻）を入れることにする。これでツイート内容の重複を回避できる。<br/>
例: 「2015-03-11_12:00:03」という部分の情報</p>

<blockquote class="twitter-tweet" lang="ja"><p>2015-03-11_12:00:03現在、CPU温度は 31.5 ℃です。</p>&mdash; ysdyt_raspi (@ysdyt_raspi) <a href="https://twitter.com/ysdyt_raspi/status/575491347655716865">2015, 3月 11</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p><br>
<a href="https://github.com/raspberrypilearning/temperature-log/blob/master/worksheet.md">こちら</a>を参考にしながら上記の<code>raspi_bot.py</code>にタイムスタンプを取得するコードを追加する。</p>

<pre><code class="python">#!/usr/bin/env python
# coding: utf-8

import os
from twython import Twython

#twitterの認証情報を入力
CONSUMER_KEY = '取得したAPI Key'
CONSUMER_SECRET = '取得したAPI Secret'
ACCESS_KEY = '取得したAccess Token'
ACCESS_SECRET = '取得したAccess Token Secret'
api = Twython(CONSUMER_KEY,CONSUMER_SECRET,ACCESS_KEY,ACCESS_SECRET)

#CPU温度を取得
cmd = '/opt/vc/bin/vcgencmd measure_temp'
line = os.popen(cmd).readline().strip() 
temp = line.split('=')[1].split("'")[0]

#現在時間を取得
timestamp = 'date +%F_%H:%M:%S'
current_time = os.popen(timestamp).readline().strip()

#取得したCPU温度をツイート
api.update_status(status= current_time+'現在、CPU温度は '+temp+' ℃です。')
</code></pre>

<p>これで、タイムスタンプが追加されツイートの内容重複が回避される。</p>

<h3>自動スリープを解除する</h3>

<p>またまた動作を観察していると、どこかの段階から全くツイートされなくなっていた&hellip;
<del>調べてみるとラズパイはデフォルトでは自動でスリープする設定になっているらしい。
<a href="http://akiomik.hatenablog.jp/entry/2013/09/12/211523">こちら</a>を参考にして自動スリープを解除した。これでようやく完成。</p>

<p>[訂正] 上記の自動スリープの話はただ単にモニター出力が自動でスリープするという話だった。
ラズパイを起動し続けると（具体的には2日半くらい）自動でシャットダウン?する減少はまだ解決できていない&hellip;熱暴走が原因か？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raspberry PiをWiMAXを使ってネット接続する]]></title>
    <link href="http://ysdyt.github.io/blog/2015/03/28/raspi-wifi-setting/"/>
    <updated>2015-03-28T01:15:29+09:00</updated>
    <id>http://ysdyt.github.io/blog/2015/03/28/raspi-wifi-setting</id>
    <content type="html"><![CDATA[<p>自宅では固定回線のネット契約をしていないので、WiMAXの無線ルーターを使っていつもネットに繋いでいる。<br/>
ラズパイのネット接続解説はほとんどが有線ケーブルでの接続を前提にしているため、Wi-Fiでの接続方法を個人的な備忘録としてメモ。</p>

<p>以下、Wi-Fiの設定は<a href="http://qiita.com/R-STYLE/items/8d37fb59e4872faee2bc">こちら</a>をほぼそのままコピペした。+αで個人的な補足を追加。</p>

<!--more-->


<p><br></p>

<h3>使用したWi-Fiドングル</h3>

<p>Rapberry Piの無線化には以下のドングルを使用。700円ほど。</p>

<p>・<a href="http://www.amazon.co.jp/gp/product/B003NSAMW2/ref=pd_lpo_sbs_dp_ss_1?pf_rd_p=466449256&amp;pf_rd_s=lpo-top-stripe&amp;pf_rd_t=201&amp;pf_rd_i=B00879RO8W&amp;pf_rd_m=AN1VRQENFRJN5&amp;pf_rd_r=1RA98FWJ7XSKXHKYNV1M">BUFFALO 無線LAN子機 コンパクトモデル 11n技術・11g/b対応 WLI-UC-GNM</a></p>

<p><br></p>

<h3>/etc/network/interfacesの編集</h3>

<pre><code class="bash">$ sudo nano /etc/network/interfaces
</code></pre>

<p>開いたファイルの中の下記2行を編集</p>

<pre><code class="bash">iface wlan0 inet manual
wpa-roam /etc/wpa_supplicant/wpa_supplicant.conf
</code></pre>

<p>↓</p>

<pre><code class="bash">iface wlan0 inet dhcp
wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf
</code></pre>

<h3>アクセスポイントのスキャン</h3>

<pre><code class="bash">$ sudo iwlist wlan0 scan | grep ESSID
</code></pre>

<p>実行すると、現在捕まえられるWi-Fiのネットワーク名（SSID）一覧が表示される。接続したいネットワーク名が存在するか確認。</p>

<h3>アクセスポイントに接続テスト</h3>

<pre><code class="bash">$ sudo iwconfig wlan0 essid 接続先のSSID key s:接続先のパスワード
</code></pre>

<h3>接続の確認</h3>

<pre><code class="bash">$ iwconfig wlan0 | grep ESSID
</code></pre>

<p>実行の結果、パスワードが合っていて、接続が可能であれば以下の様な表示が出る</p>

<pre><code class="bash">wlan0     IEEE 802.11bgn  ESSID:"接続先のSSID"
</code></pre>

<h3>接続情報の設定書き込み</h3>

<pre><code class="bash">$ sudo su -   #rootになる
$ wpa_passphrase "接続先のSSID" "接続先のパスワード" &gt;&gt; /etc/wpa_supplicant/wpa_supplicant.conf  #ファイルへ情報の書き込み
</code></pre>

<p>この結果 /etc/wpa_supplicant/wpa_supplicant.confファイルの中身に以下の情報が入っていればok</p>

<pre><code class="bash">ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1
network={
        ssid="接続先のSSID"
        #psk="接続先のパスワード"  #紛らわしいのだけどpskの先頭の"#"も必要
        psk=数字とアルファベットの羅列が入ってる
}
</code></pre>

<p>最後に pskの行の後に <code>scan_ssid=1</code>を追加。</p>

<pre><code class="bash">ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1
network={
        ssid="接続先のSSID"
        #psk="接続先のパスワード"
        psk=数字とアルファベットの羅列が入ってる
        scan_ssid=1
}
</code></pre>

<p>別の機会に他のネットワークへの接続を追加で書き込むと、</p>

<pre><code class="bash">network={
        ssid="接続先のSSID"
        hogehogehoge...
}
network={
        ssid="接続先のSSID2"
        hogehogehoge...
}
network={
        ssid="接続先のSSID3"
        hogehogehoge...
}
</code></pre>

<p>という感じで、おしりに設定情報がどんどん追加されていく。</p>

<h3>再起動</h3>

<p>ここまで設定が完了したら後は再起動で設定を反映させるだけ。</p>

<pre><code class="bash">$ sudo reboot
</code></pre>

<p>再起動後、自動でWi-Fiに接続されているはず。ブラウザなどでネット接続できるか確認してみる。</p>

<h2><br></h2>

<h3>SSHでRaspberry Piにリモートログイン</h3>

<p>以後は別件なので必要な人だけ。<br/>
上記までの手順でネットに接続できていれば、IPアドレスが取得できているはずなのでIPアドレスを確認。</p>

<pre><code class="bash">$ ifconfig wlan0
</code></pre>

<p>以下のような内容が表示される。</p>

<pre><code class="bash">wlan0     Link encap:イーサネット  ハードウェアアドレス xx:xx:xx:xx:xx:xx
          inetアドレス:192.168.0.3 ブロードキャスト:192.168.0.255  マスク:255.255.255.0
          UP BROADCAST RUNNING MULTICAST  MTU:1500  メトリック:1
          RXパケット:3799 エラー:0 損失:0 オーバラン:0 フレーム:0
          TXパケット:687 エラー:0 損失:0 オーバラン:0 キャリア:0
      衝突(Collisions):0 TXキュー長:1000
          RXバイト:1046888 (1022.3 KiB)  TXバイト:88642 (86.5 KiB)
</code></pre>

<p>このinetアドレスの値（英語環境では inet addrの値）を使って、</p>

<pre><code class="bash">$ ssh pi@192.168.0.3
</code></pre>

<p>とsshし、ログインパスワードを入れればリモートログイン出来て、自前のMacやWinからアクセスしてラズパイの操作が可能になる。（今回はdhcpの設定であり、固定アドレスではないの、ラズパイの電源を落としたりするとsshできなくなる）</p>

<p>固定アドレスの設定方法はまた別エントリーにて。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raspberry PiのCLI/GUIログインの切り替え]]></title>
    <link href="http://ysdyt.github.io/blog/2015/03/27/raspi-cli-gui-login/"/>
    <updated>2015-03-27T22:42:58+09:00</updated>
    <id>http://ysdyt.github.io/blog/2015/03/27/raspi-cli-gui-login</id>
    <content type="html"><![CDATA[<h3>CLIからGUIへの一時的な切り替え</h3>

<p>Rapberry Piを初めに起動した時はCLIから始まる。GUIへは切り替えは下記のコマンドを実行</p>

<pre><code class="bash">$ startx
</code></pre>

<p>少し待てば自動的にGUIのデスクトップが表示される。</p>

<!--more-->


<p><br></p>

<h3>起動時から自動でGUIが立ち上がるようにする</h3>

<p>raspi-configを起動</p>

<pre><code class="bash">$ sudo raspi-config
</code></pre>

<p>メニューから<br/>
「3 Enable Boot to Desktop/Scratch」を選び、<br/>
「Desktop Log in as user &lsquo;pi&rsquo; at the graphical desktop」で「了解」を選択<br/>
再起動を求められたら従う</p>

<pre><code class="bash">$ sudo reboot
</code></pre>

<p>すると最初からGUIデスクトップ画面で起動するようになる。</p>

<p><br></p>

<h3>初期起動をCLIに戻す</h3>

<p>GUI起動にした後、再びCLI起動に戻したければ、</p>

<pre><code class="bash">$ sudo raspi-config
</code></pre>

<p>メニューから<br/>
「3 Enable Boot to Desktop/Scratch」を選び、<br/>
「Console Text console, requiring login (default)」で「了解」を選択<br/>
その後、再起動をかけるとCLIから始まるようになっている</p>
]]></content>
  </entry>
  
</feed>
